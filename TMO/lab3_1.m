% 1. матрица переходов
P = [1, 1, 1, 1; 
     1, 1, 1, 1; 
     1, 1, 1, 1; 
     0, 0, 1, 1];
 
% нормализация
P = P ./ sum(P, 2);

% 2. цепь Маркова
MC = dtmc(P, 'StateNames', {'Healthy', 'Unwell', 'Sick', 'Very sick'});

% 3. вывод
disp('Матрица переходов:');
disp(MC.P);
disp('Сумма по строкам:');
disp(sum(MC.P, 2));

% 4. граф матрицы
figure;
graphplot(MC, 'ColorEdges', true);
title('Граф цепи Маркова');

% 5. кумулятивная матрица переходов
P_cum = cumsum(P, 2);
disp('Кумулятивная матрица переходов:');
disp(P_cum);

% 6. моделирование поведения цепи Маркова (200 итераций)
r = rand(1, 200);
state = 1;
z = zeros(1, 200);

for t = 1:200
    z(t) = find(r(t) < P_cum(state, :), 1);
    state = z(t);
end

% 7. график изменения состояний
figure;

subplot(3, 1, 1);
plot(1:200, z, 'LineWidth', 1.5);
xlabel('Номер итерации');
ylabel('Состояние');
title('Изменение состояния цепи Маркова за 200 итераций');
grid on;

% 8. моделирование для 1000 и 10000 итераций
subplot(3, 1, 2);
plot(1:1000, z_1000, 'LineWidth', 1.5);
xlabel('Номер итерации');
ylabel('Состояние');
title('Изменение состояния цепи Маркова за 1000 итераций');
grid on;

subplot(3, 1, 3);
plot(1:10000, z_10000, 'LineWidth', 1.5);
xlabel('Номер итерации');
ylabel('Состояние');
title('Изменение состояния цепи Маркова за 10000 итераций');
grid on;


% 9. оценка матриц переходов
P_obs_200 = zeros(4, 4);  % Инициализация матрицы наблюдений для 200 итераций
P_obs_1000 = zeros(4, 4);  % Для 1000 итераций
P_obs_10000 = zeros(4, 4);  % Для 10000 итераций

for t = 1:199
    P_obs_200(z(t), z(t+1)) = P_obs_200(z(t), z(t+1)) + 1;
end
P_obs_200 = P_obs_200 ./ sum(P_obs_200, 2);  % Нормализация

for t = 1:999
    P_obs_1000(z_1000(t), z_1000(t+1)) = P_obs_1000(z_1000(t), z_1000(t+1)) + 1;
end
P_obs_1000 = P_obs_1000 ./ sum(P_obs_1000, 2);  % Нормализация

for t = 1:9999
    P_obs_10000(z_10000(t), z_10000(t+1)) = P_obs_10000(z_10000(t), z_10000(t+1)) + 1;
end
P_obs_10000 = P_obs_10000 ./ sum(P_obs_10000, 2);  % Нормализация

disp('Оценочная матрица переходов для 200 итераций:');
disp(P_obs_200);

disp('Оценочная матрица переходов для 1000 итераций:');
disp(P_obs_1000);

disp('Оценочная матрица переходов для 10000 итераций:');
disp(P_obs_10000);

% 10. графики для итераций
figure;
subplot(3,1,1);
graphplot(dtmc(P_obs_200), 'ColorEdges', true);
title('Оценочная цепь Маркова (200 итераций)');

subplot(3,1,2);
graphplot(dtmc(P_obs_1000), 'ColorEdges', true);
title('Оценочная цепь Маркова (1000 итераций)');

subplot(3,1,3);
graphplot(dtmc(P_obs_10000), 'ColorEdges', true);
title('Оценочная цепь Маркова (10000 итераций)');

% 12. СМО
lambda = 35;  % интенсивность поступления заявок
mu = 50;      % интенсивность обслуживания
n = 7;        % количество каналов
m = 5;        % максимальная длина очереди

rho = lambda / mu;  % загрузка системы

% вероятность пустой системы
p_0 = 1 - rho;

% вероятность отказа
P_otk = (rho^(n+m)/(n^m)*factorial(n))*p_0;

% относительная пропускная способность
Q = 1 - P_otk;

% абсолютная пропускная способность
A = lambda * Q;

% среднее количество занятых каналов
k_zan = A / mu;

L_len = ((rho^(n+1))/(n*factorial(n))) * ((1-(rho/n)^m * (m+1-(m/n)*rho))/((1-(rho/n))^2)) * p_0;
T_len = L_len / lambda;
% среднее количество заявок в системе
L_sist = L_len + k_zan;

% среднее время пребывания заявки в системе
T_sist = L_sist / lambda;

% результаты расчета
disp('Показатели эффективности СМО:');
disp(['Вероятность отказа: ', num2str(P_otk)]);
disp(['Относительная пропускная способность: ', num2str(Q)]);
disp(['Абсолютная пропускная способность: ', num2str(A)]);
disp(['Среднее количество занятых каналов: ', num2str(k_zan)]);
disp(['Среднее количество заявок в системе: ', num2str(L_sist)]);
disp(['Среднее время пребывания заявки в системе: ', num2str(T_sist)]);
